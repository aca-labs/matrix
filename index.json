{"repository_name":"github.com/aca-labs/matrix","body":"# matrix\n\n[![GitHub release](https://img.shields.io/github/release/aca-labs/matrix.svg)](https://github.com/aca-labs/matrix/releases)\n[![Build Status](https://travis-ci.com/aca-labs/matrix.svg?branch=master)](https://travis-ci.com/aca-labs/matrix)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://aca-labs.github.io/matrix/)\n\n![](https://static.thenounproject.com/png/658616-200.png)\n\nGeneric, type-safe matrix structure for crystal-lang.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  matrix:\n    github: aca-labs/matrix\n```\n\n## Usage\n\n```crystal\nrequire \"matrix\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it ( https://github.com/aca-labs/matrix/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kim Burgess](https://github.com/kimburgess) - creator, maintainer\n","program":{"html_id":"github.com/aca-labs/matrix/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/aca-labs/matrix","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/aca-labs/matrix/Matrix","path":"Matrix.html","kind":"struct","full_name":"Matrix(T, M, N)","name":"Matrix","abstract":false,"superclass":{"html_id":"github.com/aca-labs/matrix/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/aca-labs/matrix/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/aca-labs/matrix/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/aca-labs/matrix/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/aca-labs/matrix/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/aca-labs/matrix/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/aca-labs/matrix/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"matrix.cr","line_number":8,"url":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr"}],"repository_name":"github.com/aca-labs/matrix","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/aca-labs/matrix/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Generic, type-safe abstract matrix structure.\n\nThis structure provides an *M* x *N* rectangular array of any\n[field](https://en.wikipedia.org/wiki/Field_(mathematics)) *T*. That is, *T*\nmust define operations for addition, subtraction, multiplication and division.\n\nWhere possible, all matrix operations provide validation at the type level.","summary":"<p>Generic, type-safe abstract matrix structure.</p>","class_methods":[{"id":"build(&initialiser:UInt32,UInt32->T)-class-method","html_id":"build(&amp;initialiser:UInt32,UInt32-&gt;T)-class-method","name":"build","doc":"Creates a Matrix, invoking *initialiser* with each pair of indices.","summary":"<p>Creates a Matrix, invoking <em>initialiser</em> with each pair of indices.</p>","abstract":false,"args":[],"args_string":"(&initialiser : UInt32, UInt32 -> T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L17","def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"initialiser","doc":null,"default_value":"","external_name":"initialiser","restriction":"(UInt32, UInt32 -> T)"},"return_type":"","visibility":"Public","body":"Matrix(T, M, N).new do |idx|\n  i = (idx / N).to_u32\n  j = (idx % N).to_u32\n  initialiser.call(i, j)\nend"}},{"id":"from(list:StaticArray(T,A))-class-method","html_id":"from(list:StaticArray(T,A))-class-method","name":"from","doc":"Creates a Matrix from elements contained within a StaticArray.\n\nThe matrix will be filled rows first, such that an array of\n\n  [1, 2, 3, 4]\n\nbecomes\n\n  | 1  2 |\n  | 3  4 |\n","summary":"<p>Creates a Matrix from elements contained within a StaticArray.</p>","abstract":false,"args":[{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"StaticArray(T, A)"}],"args_string":"(list : StaticArray(T, A))","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L36","def":{"name":"from","args":[{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"StaticArray(T, A)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ if A < (M * N)\n  raise(\"Not enough elements to fill matrix\")\nend }}\nMatrix(T, M, N).new do |idx|\n  list[idx]\nend\n"}},{"id":"identity(id=T.zero+1)-class-method","html_id":"identity(id=T.zero+1)-class-method","name":"identity","doc":"Build the idenity matrix for the instanced type and dimensions.\n\n`id` may be used to specify an identity element for the type. If unspecifed\na numeric identity will be assumed.","summary":"<p>Build the idenity matrix for the instanced type and dimensions.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"T.zero + 1","external_name":"id","restriction":""}],"args_string":"(id = <span class=\"t\">T</span>.zero <span class=\"o\">+</span> <span class=\"n\">1</span>)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L54","def":{"name":"identity","args":[{"name":"id","doc":null,"default_value":"T.zero + 1","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ unless M == N\n  raise(\"Matrix dimensions must be square\")\nend }}\nMatrix(T, N, M).build do |i, j|\n  i == j ? id : T.zero\nend\n"}},{"id":"of(value:T)-class-method","html_id":"of(value:T)-class-method","name":"of","doc":"Creates a Matrix with each element initialized as *value*.","summary":"<p>Creates a Matrix with each element initialized as <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L12","def":{"name":"of","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Matrix(T, M, N).new do\n  value\nend"}},{"id":"zero-class-method","html_id":"zero-class-method","name":"zero","doc":"Build a zero matrix (all elements populated with zero value of the type\nisntance).","summary":"<p>Build a zero matrix (all elements populated with zero value of the type isntance).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L46","def":{"name":"zero","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Matrix(T, N, M).new do\n  T.zero\nend"}}],"constructors":[{"id":"new(&block:Int32->T)-class-method","html_id":"new(&amp;block:Int32-&gt;T)-class-method","name":"new","doc":"Creates Matrix, yielding the linear index for each element to provide an\ninitial value.","summary":"<p>Creates Matrix, yielding the linear index for each element to provide an initial value.</p>","abstract":false,"args":[],"args_string":"(&block : Int32 -> T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L64","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Int32 -> T)"},"return_type":"","visibility":"Public","body":"_ = Matrix(T, M, N).allocate\n_.initialize(&block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"*(other:Matrix(UNDERSCORE,A,B))-instance-method","html_id":"*(other:Matrix(UNDERSCORE,A,B))-instance-method","name":"*","doc":"Performs a matrix multiplication with *other*.","summary":"<p>Performs a matrix multiplication with <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(_, A, B)"}],"args_string":"(other : Matrix(UNDERSCORE, A, B))","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L100","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(_, A, B)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ unless N == A\n  raise(\"Dimension mismatch, cannot multiply a #{M}x#{N} by a #{A}x#{B}\")\nend }}\nMatrix(typeof(self[0] * other[0]), M, B).build do |i, j|\n  pairs = (row(i)).zip(other.col(j))\n  pairs.map(&.product).sum\nend\n"}},{"id":"*(other)-instance-method","html_id":"*(other)-instance-method","name":"*","doc":"Performs a scalar multiplication with *other*.","summary":"<p>Performs a scalar multiplication with <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L111","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"map do |x|\n  x * other\nend"}},{"id":"+(other:Matrix)-instance-method","html_id":"+(other:Matrix)-instance-method","name":"+","doc":"Returns a new Matrix that is the result of performing a matrix addition with\n*other*","summary":"<p>Returns a new Matrix that is the result of performing a matrix addition with <em>other</em></p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix"}],"args_string":"(other : Matrix)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L89","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merge(other) do |a, b|\n  a + b\nend"}},{"id":"-(other:Matrix)-instance-method","html_id":"-(other:Matrix)-instance-method","name":"-","doc":"Returns a new Matrix that is the result of performing a matrix subtraction\nwith *other*","summary":"<p>Returns a new Matrix that is the result of performing a matrix subtraction with <em>other</em></p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix"}],"args_string":"(other : Matrix)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L95","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merge(other) do |a, b|\n  a - b\nend"}},{"id":"==(other:Matrix(U,A,B))forallU-instance-method","html_id":"==(other:Matrix(U,A,B))forallU-instance-method","name":"==","doc":"Equality. Returns `true` if each element in `self` is equal to each\ncorresponding element in *other*.","summary":"<p>Equality.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(U, A, B)"}],"args_string":"(other : Matrix(U, A, B)) forall U","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L71","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(U, A, B)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if (A == M) && (B == N) %}\n      each_with_index do |e, i|\n        return false unless e == other[i]\n      end\n      true\n    {% else %}\n      false\n    {% end %}"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Equality with another object, or differently sized matrix. Always `false`.","summary":"<p>Equality with another object, or differently sized matrix.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L83","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"[](i:Int,j:Int):T-instance-method","html_id":"[](i:Int,j:Int):T-instance-method","name":"[]","doc":"Retrieves the value of the element at *i*,*j*.\n\nIndicies are zero-based. Negative values may be passed for *i* and *j* to\nenable reverse indexing such that `self[-1, -1] == self[M - 1, N - 1]`\n(same behaviour as arrays).","summary":"<p>Retrieves the value of the element at <em>i</em>,<em>j</em>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"}],"args_string":"(i : Int, j : Int) : T","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L120","def":{"name":"[]","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"idx = index(i, j)\nto_unsafe[idx]\n"}},{"id":"[]=(i:Int,j:Int,value:T)-instance-method","html_id":"[]=(i:Int,j:Int,value:T)-instance-method","name":"[]=","doc":"Sets the value of the element at *i*,*j*.","summary":"<p>Sets the value of the element at <em>i</em>,<em>j</em>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(i : Int, j : Int, value : T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L126","def":{"name":"[]=","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"idx = index(i, j)\nto_unsafe[idx] = value\n"}},{"id":"col(j:Int)-instance-method","html_id":"col(j:Int)-instance-method","name":"col","doc":"Gets the cotents of column *j*.","summary":"<p>Gets the cotents of column <em>j</em>.</p>","abstract":false,"args":[{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"}],"args_string":"(j : Int)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L137","def":{"name":"col","args":[{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StaticArray(T, M).new do |i|\n  self[i, j]\nend"}},{"id":"cols-instance-method","html_id":"cols-instance-method","name":"cols","doc":"Count of columns.","summary":"<p>Count of columns.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L211","def":{"name":"cols","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"N"}},{"id":"dimensions-instance-method","html_id":"dimensions-instance-method","name":"dimensions","doc":"Returns the dimensions of `self` as a tuple of `{rows, cols}`.","summary":"<p>Returns the dimensions of <code>self</code> as a tuple of <code>{rows, cols}</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L196","def":{"name":"dimensions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{M, N}"}},{"id":"map(&block:T->U)forallU-instance-method","html_id":"map(&amp;block:T-&gt;U)forallU-instance-method","name":"map","doc":"Apply a morphism to all elements, returning a new Matrix with the result.","summary":"<p>Apply a morphism to all elements, returning a new Matrix with the result.</p>","abstract":false,"args":[],"args_string":"(&block : T -> U) forall U","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L149","def":{"name":"map","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> U)"},"return_type":"","visibility":"Public","body":"Matrix(U, M, N).new do |idx|\n  block.call(to_unsafe[idx])\nend"}},{"id":"map!(&block:T->T)-instance-method","html_id":"map!(&amp;block:T-&gt;T)-instance-method","name":"map!","doc":"Apply an endomorphism to `self`, mutating all elements in place.","summary":"<p>Apply an endomorphism to <code>self</code>, mutating all elements in place.</p>","abstract":false,"args":[],"args_string":"(&block : T -> T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L170","def":{"name":"map!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> T)"},"return_type":"","visibility":"Public","body":"each_with_index do |e, idx|\n  to_unsafe[idx] = yield e\nend\nself\n"}},{"id":"map_with_index(&block:T,Int32->U)forallU-instance-method","html_id":"map_with_index(&amp;block:T,Int32-&gt;U)forallU-instance-method","name":"map_with_index","doc":"Apply a morphism to all elements, returning a new Matrix with the result.","summary":"<p>Apply a morphism to all elements, returning a new Matrix with the result.</p>","abstract":false,"args":[],"args_string":"(&block : T, Int32 -> U) forall U","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L163","def":{"name":"map_with_index","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, Int32 -> U)"},"return_type":"","visibility":"Public","body":"Matrix(U, M, N).new do |idx|\n  block.call(to_unsafe[idx], idx)\nend"}},{"id":"map_with_indices(&block:T,UInt32,UInt32->U)forallU-instance-method","html_id":"map_with_indices(&amp;block:T,UInt32,UInt32-&gt;U)forallU-instance-method","name":"map_with_indices","doc":"Apply a morphism to all elements, returning a new Matrix with the result.","summary":"<p>Apply a morphism to all elements, returning a new Matrix with the result.</p>","abstract":false,"args":[],"args_string":"(&block : T, UInt32, UInt32 -> U) forall U","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L156","def":{"name":"map_with_indices","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, UInt32, UInt32 -> U)"},"return_type":"","visibility":"Public","body":"Matrix(U, M, N).from do |i, j|\n  block.call(self[i, j], i, j)\nend"}},{"id":"merge(other:Matrix(U,A,B),&block:T,U->UNDERSCORE)forallU-instance-method","html_id":"merge(other:Matrix(U,A,B),&amp;block:T,U-&gt;UNDERSCORE)forallU-instance-method","name":"merge","doc":"Merge with another similarly dimensions matrix, apply the passed block to\neach elemenet pair.","summary":"<p>Merge with another similarly dimensions matrix, apply the passed block to each elemenet pair.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(U, A, B)"}],"args_string":"(other : Matrix(U, A, B), &block : T, U -> UNDERSCORE) forall U","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L179","def":{"name":"merge","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Matrix(U, A, B)"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, U -> _)"},"return_type":"","visibility":"Public","body":"{{ unless (A == M) && (B == N)\n  raise(\"Dimension mismatch\")\nend }}\nmap_with_index do |e, i|\n  block.call(e, other[i])\nend\n"}},{"id":"row(i:Int)-instance-method","html_id":"row(i:Int)-instance-method","name":"row","doc":"Gets the contents of row *i*.","summary":"<p>Gets the contents of row <em>i</em>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L132","def":{"name":"row","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StaticArray(T, N).new do |j|\n  self[i, j]\nend"}},{"id":"rows-instance-method","html_id":"rows-instance-method","name":"rows","doc":"Count of rows.","summary":"<p>Count of rows.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L206","def":{"name":"rows","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"M"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Gets the capacity (total number of elements) of `self`.","summary":"<p>Gets the capacity (total number of elements) of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L201","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"M * N"}},{"id":"transpose-instance-method","html_id":"transpose-instance-method","name":"transpose","doc":"Creates a new matrix that is the result of inverting the rows and columns\nof `self`.","summary":"<p>Creates a new matrix that is the result of inverting the rows and columns of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L189","def":{"name":"transpose","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Matrix(T, N, M).build do |i, j|\n  self[j, i]\nend"}},{"id":"update(i,j,&block:T->T)-instance-method","html_id":"update(i,j,&amp;block:T-&gt;T)-instance-method","name":"update","doc":"Yields the current element at *i*,*j* and updates the value with the\nblock's return value.","summary":"<p>Yields the current element at <em>i</em>,<em>j</em> and updates the value with the block's return value.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":""},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":""}],"args_string":"(i, j, &block : T -> T)","source_link":"https://github.com/aca-labs/matrix/blob/19ffe600d6480e8118111c96107ebbd61d32f688/src/matrix.cr#L143","def":{"name":"update","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":""},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> T)"},"return_type":"","visibility":"Public","body":"idx = index(i, j)\nto_unsafe[idx] = yield to_unsafe[idx]\n"}}],"macros":[],"types":[]}]}}